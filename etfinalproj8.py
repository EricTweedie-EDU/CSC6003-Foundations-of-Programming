# -*- coding: utf-8 -*-
"""ETfinalproj8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14UF0BXEksW6hS_PnzoVbSu4AAzoGl7VT
"""

import random
# program that is creating a bank account management system
# allows users to create accounts, deposit funds, withdraw funds, check the account balance, and perform transfers

# creating the bankaccount class
class BankAccount:
    '''Class that holds the account number and balance attributes.

        parameters:
        account number: integer
        balance: float'''

    def __init__(self, account_number, balance):
        self.account_number = account_number
        self.balance = balance


# empty list for account numbers to go into
accounts = []
# dictionary for the completed account_numbers and associated balance, starting empty
completed_accounts = {}

# Bank class that has the methods for creating, getting, depositing, withdrawing, and transfering funds
class Bank(BankAccount):
    '''Class that allows user to create, get, deposit, withdraw, and transfer funds with accounts.
    Takes in the BankAccount classes attributes account_number and balance'''
    def __init__(self, create_account, get_account, deposit, withdraw, transfer, check_balance):
        def __init__(account_number, balance):
            self.create_account = create_account
            self.get_account = get_account
            self.deposit = deposit
            self.withdraw = withdraw
            self.transfer = transfer
            self.check_balance = check_balance

    def create_account(self):
        balance = float(input("Please enter your starting balance: "))
        account_number = random.randint(1000000000, 9999999999)
        accounts.append(account_number)
        completed_accounts[account_number] = balance
        print(f"Your new account details: account # {account_number} and starting balance ${balance:.2f}")

    def get_account(self):
        x = int(input("Please provide your account number: "))
        if x in accounts:
            print(f"Your account {x} is valid.")
            print(f"Your balance is ${completed_accounts.get(x):.2f}")
        else:
            return "Account not found"

    def check_balance(self):
        x = int(input("Please enter your account number: "))
        if x in accounts:
            print(f"Your balance is ${completed_accounts[x]:.2f}")
        else:
            return "Account not found."

    def withdraw(self):
        x = int(input("Please enter your account number: "))
        if x in accounts:
            y = float(input("How much are you withdrawing: "))
            if y > completed_accounts[x]:
                print("Insufficient funds.")
            else:
                completed_accounts.update({x: (completed_accounts.get(x) - y)})
                print(f"Withdrawal complete for ${y:.2f}")

    def deposit(self):
        x = int(input("Please enter your account number: "))
        if x in accounts:
            y = float(input("How much are you depositing: "))
            completed_accounts.update({x: (completed_accounts.get(x) + y)})
            print(f"Deposit complete for ${y:.2f}")

    def transfer(self):
        x = int(input("Please enter your account number: "))
        y = int(input("Enter the account number you are transferring to: "))
        if x and y in accounts:
            a = float(input("How much are you transfering: "))
            completed_accounts.update({y: (completed_accounts.get(y) + a)})
            completed_accounts.update({x: (completed_accounts.get(x) - a)})
            print(f"Transfer complete for ${a:.2f}")
        else:
            return "Account not found."

# menu function that displays the options for the user
def menu():
    print("What would you like to do?")
    print("Here are your options:")
    print("1 = Create Account\n",
          "2 = Check Account Details\n",
          "3 = Check Balance\n",
          "4 = Withdraw Fund\n",
          "5 = Deposit Funds\n",
          "6 = Transfer Funds\n",
          "7 = Quit")

menu()

# execute_choice function that takes the user input and executes their choice

def execute_choice():
    bank = Bank(Bank.create_account, Bank.get_account, Bank.deposit, Bank.withdraw, Bank.transfer, Bank.check_balance)
    choice = int(input("What option would like to do: "))
    if choice == 1:
        bank.create_account()
    elif choice == 2:
        bank.get_account()
    elif choice == 3:
        bank.check_balance()
    elif choice == 4:
        bank.withdraw()
    elif choice == 5:
        bank.deposit()
    elif choice == 6:
        bank.transfer()
    elif choice == 7:
        print("Exiting Bank Account.")

execute_choice()

# function that prompts the user if they want to continue with another operation or not
def continue_operation():
    Y = 'Y'
    N = 'N'
    while True:
        a = input("Would you like to continue(Y/N): ").upper()
        if a != N:
            execute_choice()
        elif a == N:
            print("Thank you, come again.")
            break

continue_operation()